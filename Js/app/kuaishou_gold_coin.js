// ÂΩìÂâçËÑöÊú¨Êù•Ëá™‰∫éhttp://script.345yun.cnËÑöÊú¨Â∫ì‰∏ãËΩΩÔºÅ
// ÂΩìÂâçËÑöÊú¨Êù•Ëá™‰∫éÊπñÂåóÂπøÁîµÁΩëÁªúÁ†¥Ëß£ÔºÅ
//ksck   ck#salt#‰ª£ÁêÜ
//Task food,box,look
const qs = require("querystring");
const axios = require("axios");

const querystring = require("querystring");
const { SocksProxyAgent } = require("socks-proxy-agent");

// ÁîüÊàêÈöèÊú∫‰∫§‰∫íÊ∂àÊÅØ
function generateRandomInteractionMessage() {
  const messages = [
    "Ê≠£Âú®ËßÇÁúãÂπøÂëä",
    "ËÆ§ÁúüËßÇÁúã‰∏≠...",
    "ÊµèËßàÂπøÂëäÂÜÖÂÆπ",
    "Ê®°ÊãüÁî®Êà∑Ë°å‰∏∫",
    "ËßÇÁúãËßÜÈ¢ëÂπøÂëä",
    "‰øùÊåÅÊ¥ªË∑ÉÁä∂ÊÄÅ",
    "ÂπøÂëäÊµèËßà‰∏≠",
    "Ê≠£Â∏∏ËßÇÁúãÊó∂Èïø",
  ];
  return messages[Math.floor(Math.random() * messages.length)];
}

// ÂºÄÂèëÊ®°ÂºèÂíåÁéØÂ¢ÉÂèòÈáèÊ£ÄÊµã
const isDevMode =
  process.env.DEV_MODE === "1" || process.env.DEV_MODE === "true";

// Ëé∑ÂèñÁéØÂ¢ÉÂèòÈáèÂÄºÔºåÂ∏¶ÈªòËÆ§ÂÄº
function getEnvNumber(envKey, defaultValue) {
  const value = parseInt(process.env[envKey], 10);
  return isNaN(value) ? defaultValue : value;
}

// Êñ∞Â¢ûÔºöËé∑ÂèñÁéØÂ¢ÉÂèòÈáè
const KSLOW_REWARD_THRESHOLD = getEnvNumber("KSLOW_REWARD_THRESHOLD", 10);
const KSROUNDS = getEnvNumber("KSROUNDS", 35);
const KSCOIN_LIMIT = getEnvNumber("KSCOIN_LIMIT", 500000);
const KSLOW_REWARD_LIMIT = getEnvNumber("KSLOW_REWARD_LIMIT", 3);

// Ëé∑ÂèñË¶ÅÊâßË°åÁöÑ‰ªªÂä°ÂàóË°®
function getTasksToExecute() {
  const taskEnv = process.env.Task;
  if (!taskEnv) {
    console.log("Êú™ËÆæÁΩÆTaskÁéØÂ¢ÉÂèòÈáèÔºåÂ∞ÜÊâßË°åÊâÄÊúâ‰ªªÂä° (food, box, look)");
    return ["food", "box", "look"];
  }

  const tasks = taskEnv
    .split(",")
    .map((task) => task.trim().toLowerCase())
    .filter(Boolean);
  const validTasks = ["food", "box", "look"];
  const filteredTasks = tasks.filter((task) => validTasks.includes(task));

  if (filteredTasks.length === 0) {
    console.log("TaskÁéØÂ¢ÉÂèòÈáè‰∏≠Ê≤°ÊúâÊúâÊïà‰ªªÂä°ÔºåÂ∞ÜÊâßË°åÊâÄÊúâ‰ªªÂä° (food, box, look)");
    return ["food", "box", "look"];
  }

  console.log(
    "‰ªéTaskÁéØÂ¢ÉÂèòÈáè‰∏≠Ëß£ÊûêÂà∞Ë¶ÅÊâßË°åÁöÑ‰ªªÂä°: " + filteredTasks.join(", ")
  );
  return filteredTasks;
}

// ‰ªé ksck, ksck1 Âà∞ ksck666 ËØªÂèñË¥¶Âè∑ÈÖçÁΩÆ
function getAccountConfigsFromEnv() {
  const configs = [];
  const seenConfigs = new Set();

  if (process.env.ksck) {
    const ksckValue = process.env.ksck;
    const configStrings = ksckValue
      .split("&")
      .map((config) => config.trim())
      .filter(Boolean);
    configs.push(...configStrings);
  }

  for (let i = 1; i <= 666; i++) {
    const ksckKey = `ksck${i}`;
    if (process.env[ksckKey]) {
      const ksckValue = process.env[ksckKey];
      const configStrings = ksckValue
        .split("&")
        .map((config) => config.trim())
        .filter(Boolean);
      configs.push(...configStrings);
    }
  }

  const uniqueConfigs = [];
  for (const config of configs) {
    if (!seenConfigs.has(config)) {
      seenConfigs.add(config);
      uniqueConfigs.push(config);
    }
  }

  console.log(
    `‰ªéksckÂèäksck1Âà∞ksck666ÁéØÂ¢ÉÂèòÈáè‰∏≠Ëß£ÊûêÂà∞ ${uniqueConfigs.length} ‰∏™ÂîØ‰∏ÄÈÖçÁΩÆ`
  );
  return uniqueConfigs;
}

const accountConfigs = getAccountConfigsFromEnv();
const accountCount = accountConfigs.length;
const tasksToExecute = getTasksToExecute();

console.log(
  "================================================================================"
);
console.log(
  "                                  ‚≠ê Âø´ÊâãËá≥Â∞äÈáëÂ∏ÅËá≥Â∞äÊôÆÈÄöÁâà ‚≠ê                                "
);
console.log(
  "                            üèÜ ÂÆâÂÖ®Á®≥ÂÆö ¬∑ È´òÊïàÊî∂Áõä ¬∑ Â∞äË¥µ‰ΩìÈ™å üèÜ                        "
);
console.log("================üéâ Á≥ªÁªüÂàùÂßãÂåñÂÆåÊàêÔºåÂø´ÊâãËá≥Â∞äÈáëÂ∏ÅÁâàÂêØÂä®ÊàêÂäüÔºÅüéâ");
console.log("üíé Ê£ÄÊµãÂà∞ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆÔºö" + accountCount + "‰∏™Ë¥¶Âè∑");
console.log("üéØ Â∞ÜÊâßË°å‰ª•‰∏ã‰ªªÂä°Ôºö" + tasksToExecute.join(", "));
console.log(
  `üéØ ÈÖçÁΩÆÂèÇÊï∞ÔºöËΩÆÊï∞=${KSROUNDS}, ÈáëÂ∏Å‰∏äÈôê=${KSCOIN_LIMIT}, ‰ΩéÂ•ñÂä±ÈòàÂÄº=${KSLOW_REWARD_THRESHOLD}, ËøûÁª≠‰ΩéÂ•ñÂä±‰∏äÈôê=${KSLOW_REWARD_LIMIT}`
);

if (accountCount > (process.env.MAX_CONCURRENCY || 999)) {
  console.log(
    "ÈîôËØØ: Ê£ÄÊµãÂà∞ " +
      accountCount +
      " ‰∏™Ë¥¶Âè∑ÈÖçÁΩÆÔºåÊúÄÂ§öÂè™ÂÖÅËÆ∏" +
      (process.env.MAX_CONCURRENCY || 999) +
      "‰∏™"
  );
  process.exit(1);
}

// ÁîüÊàêÂø´ÊâãËÆæÂ§áID
function generateKuaishouDid() {
  try {
    const generateRandomHexString = (length) => {
      const hexChars = "0123456789abcdef";
      let result = "";
      for (let i = 0; i < length; i++) {
        result += hexChars.charAt(Math.floor(Math.random() * hexChars.length));
      }
      return result;
    };

    const randomId = generateRandomHexString(16);
    const deviceId = "ANDROID_" + randomId;
    return deviceId;
  } catch (error) {
    console.log("ÁîüÊàêdidÂ§±Ë¥•: " + error.message);
    const timestamp = Date.now().toString(16).toUpperCase();
    return "ANDROID_" + timestamp.substring(0, 16);
  }
}

// ÂèëÈÄÅÁΩëÁªúËØ∑Ê±Ç
async function sendRequest(
  requestOptions,
  proxyUrl = null,
  description = "Unknown Request"
) {
  const finalOptions = { ...requestOptions };

  // ÈÖçÁΩÆ‰ª£ÁêÜ
  let agent = null;
  if (proxyUrl) {
    try {
      agent = new SocksProxyAgent(proxyUrl);
      if (isDevMode) {
        //console.log("[Ë∞ÉËØï] " + description + " ‰ΩøÁî®‰ª£ÁêÜ: " + proxyUrl);
      }
    } catch (proxyError) {
      console.log(
        "[ÈîôËØØ] " +
          description +
          " ‰ª£ÁêÜURLÊó†Êïà(" +
          proxyError.message +
          ")ÔºåÂ∞ùËØïÁõ¥ËøûÊ®°Âºè"
      );
      if (isDevMode) {
        console.log("[Ë∞ÉËØï] ‰ª£ÁêÜÊó†ÊïàÔºåËá™Âä®ÂàáÊç¢Âà∞Áõ¥ËøûÊ®°Âºè");
      }
    }
  } else {
    if (isDevMode) {
      console.log("[Ë∞ÉËØï] Êú™ÈÖçÁΩÆ‰ª£ÁêÜÔºå‰ΩøÁî®Áõ¥ËøûÊ®°Âºè");
    }
  }

  if (isDevMode) {
    const method = finalOptions.method || "GET";
    //console.log("[Ë∞ÉËØï] " + description + " -> " + method + " " + finalOptions.url);
  }

  try {
    // ÈÖçÁΩÆ axios ËØ∑Ê±ÇÈÄâÈ°π
    const axiosConfig = {
      method: finalOptions.method || "GET",
      url: finalOptions.url,
      headers: finalOptions.headers || {},
      data: finalOptions.body || finalOptions.form,
      timeout: finalOptions.timeout || 30000,
      ...(agent && {
        httpAgent: agent,
        httpsAgent: agent,
      }),
    };

    const response = await axios(axiosConfig);

    return { response: response, body: response.data };
  } catch (error) {
    if (error.response) {
      // ÊúçÂä°Âô®ËøîÂõû‰∫ÜÈîôËØØÁä∂ÊÄÅÁ†Å
      return { response: error.response, body: null };
    } else if (error.request) {
      // ËØ∑Ê±ÇÂèëÈÄÅÂ§±Ë¥•
      if (error.name === "AggregateError" && Array.isArray(error.errors)) {
        console.log(
          "[Ë∞ÉËØï] " +
            description +
            " ËØ∑Ê±ÇÈîôËØØ: AggregateError\n" +
            error.errors
              .map((err, index) => "  [" + index + "] " + (err?.message || err))
              .join("\n")
        );
      } else {
        // console.log("[Ë∞ÉËØï] " + description + " ËØ∑Ê±ÇÈîôËØØ: " + (error.message || String(error)));
      }
    } else {
      // ÂÖ∂‰ªñÈîôËØØ
      // console.log("[Ë∞ÉËØï] " + description + " ËØ∑Ê±ÇÈîôËØØ: " + (error.message || String(error)));
    }

    return { response: null, body: null };
  }
}

// ÊµãËØï‰ª£ÁêÜËøûÈÄöÊÄß
async function testProxyConnectivity(proxyUrl, description = "‰ª£ÁêÜËøûÈÄöÊÄßÊ£ÄÊµã") {
  if (!proxyUrl) {
    return {
      ok: true,
      msg: "‚úÖ Êú™ÈÖçÁΩÆ‰ª£ÁêÜÔºàÁõ¥ËøûÊ®°ÂºèÔºâ",
      ip: "localhost",
    };
  }

  const { response: baiduResponse, body: baiduResult } = await sendRequest(
    {
      method: "GET",
      url: "https://httpbin.org/ip",
      headers: {
        "User-Agent": "ProxyTester/1.0",
      },
      timeout: 8000,
    },
    proxyUrl,
    description + " ‚Üí baidu.com"
  );
  if (baiduResult) {
    return {
      ok: true,
      msg: `‚úÖ SOCKS5‰ª£ÁêÜÊ≠£Â∏∏ÔºåÊàêÂäüËÆøÈóÆ baidu.comÔºåÂá∫Âè£IP: ${ip}`,
      ip: baiduResult.origin,
    };
  }
}

const usedProxies = new Set();

// Ëé∑ÂèñË¥¶Âè∑Âü∫Êú¨‰ø°ÊÅØ
async function getAccountBasicInfo(cookie, proxyUrl, accountId = "?") {
  const url =
    "https://nebula.kuaishou.com/rest/n/nebula/activity/earn/overview/basicInfo?source=bottom_guide_first";

  const { body: result } = await sendRequest(
    {
      method: "GET",
      url: url,
      headers: {
        Host: "nebula.kuaishou.com",
        "User-Agent": "kwai-android aegon/3.56.0",
        Cookie: cookie,
        "Content-Type": "application/x-www-form-urlencoded",
      },
      timeout: 12000,
    },
    proxyUrl,
    "Ë¥¶Âè∑[" + accountId + "] Ëé∑ÂèñÂü∫Êú¨‰ø°ÊÅØ"
  );

  if (result && result.result === 1 && result.data) {
    return {
      nickname: result.data.userData?.nickname || null,
      totalCoin: result.data.totalCoin ?? null,
      allCash: result.data.allCash ?? null,
    };
  }

  return null;
}

// ÊñáÊú¨Â±Ö‰∏≠ÂØπÈΩê
function centerAlign(text, width) {
  text = String(text);
  if (text.length >= width) {
    return text.substring(0, width);
  }

  const padding = width - text.length;
  const leftPadding = Math.floor(padding / 2);
  const rightPadding = padding - leftPadding;

  return " ".repeat(leftPadding) + text + " ".repeat(rightPadding);
}

// Âø´ÊâãÂπøÂëä‰ªªÂä°Á±ª
class KuaishouAdTask {
  constructor({
    index,
    salt,
    cookie,
    nickname = "",
    proxyUrl = null,
    tasksToExecute = ["food", "box", "look"],
    remark = "",
  }) {
    this.index = index;
    this.salt = salt;
    this.cookie = cookie;
    this.nickname = nickname || remark || "Ë¥¶Âè∑" + index; // Use remark if provided, else nickname or default
    this.remark = remark; // Store remark for use in logging
    this.proxyUrl = proxyUrl;
    this.coinLimit = KSCOIN_LIMIT;
    this.coinExceeded = false;
    this.tasksToExecute = tasksToExecute;

    this.extractCookieInfo();

    this.headers = {
      Host: "nebula.kuaishou.com",
      Connection: "keep-alive",
      "User-Agent":
        "Mozilla/5.0 (Linux; Android 10; MI 8 Lite Build/QKQ1.190910.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.101 Mobile Safari/537.36",
      Cookie: this.cookie,
      "content-type": "application/json",
    };

    this.taskReportPath = "/rest/r/ad/task/report";
    this.startTime = Date.now();
    this.endTime = this.startTime - 30000;
    this.queryParams =
      "mod=Xiaomi(MI 11)&appver=" +
      this.appver +
      "&egid=" +
      this.egid +
      "&did=" +
      this.did;

    this.taskConfigs = {
      box: {
        name: "ÂÆùÁÆ±ÂπøÂëä",
        businessId: 606,
        posId: 20346,
        subPageId: 100024064,
        requestSceneType: 1,
        taskType: 1,
      },
      look: {
        name: "ÁúãÂπøÂëäÂæóÈáëÂ∏Å",
        businessId: 672,
        posId: 24067,
        subPageId: 100026367,
        requestSceneType: 1,
        taskType: 1,
      },
      food: {
        name: "È•≠Ë°•ÂπøÂëä",
        businessId: 9362,
        posId: 24067,
        subPageId: 100026367,
        requestSceneType: 7,
        taskType: 2,
      },
    };

    this.taskStats = {};
    this.tasksToExecute.forEach((taskKey) => {
      if (this.taskConfigs[taskKey]) {
        this.taskStats[taskKey] = {
          success: 0,
          failed: 0,
          totalReward: 0,
        };
      }
    });

    this.lowRewardStreak = 0;
    this.lowRewardThreshold = KSLOW_REWARD_THRESHOLD;
    this.lowRewardLimit = KSLOW_REWARD_LIMIT;
    this.stopAllTasks = false;

    this.taskLimitReached = {};
    this.tasksToExecute.forEach((taskKey) => {
      if (this.taskConfigs[taskKey]) {
        this.taskLimitReached[taskKey] = false;
      }
    });
  }

  async checkCoinLimit() {
    try {
      const accountInfo = await getAccountBasicInfo(
        this.cookie,
        this.proxyUrl,
        this.index
      );
      if (accountInfo && accountInfo.totalCoin) {
        const currentCoin = parseInt(accountInfo.totalCoin);
        if (currentCoin >= this.coinLimit) {
          console.log(
            `‚ö†Ô∏è Ë¥¶Âè∑[${this.nickname}]${
              this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
            } ÈáëÂ∏ÅÂ∑≤Ëææ ${currentCoin}ÔºåË∂ÖËøá ${this.coinLimit} ÈòàÂÄºÔºåÂ∞ÜÂÅúÊ≠¢‰ªªÂä°`
          );
          this.coinExceeded = true;
          this.stopAllTasks = true;
          return true;
        }
      }
      return false;
    } catch (error) {
      console.log(
        `Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } ÈáëÂ∏ÅÊ£ÄÊü•ÂºÇÂ∏∏: ${error.message}`
      );
      return false;
    }
  }

  extractCookieInfo() {
    try {
      const egidMatch = this.cookie.match(/egid=([^;]+)/);
      const didMatch = this.cookie.match(/did=([^;]+)/);
      const userIdMatch = this.cookie.match(/userId=([^;]+)/);
      const apiStMatch = this.cookie.match(/kuaishou\.api_st=([^;]+)/);
      const appverMatch = this.cookie.match(/appver=([^;]+)/);

      this.egid = egidMatch ? egidMatch[1] : "";
      this.did = didMatch ? didMatch[1] : "";
      this.userId = userIdMatch ? userIdMatch[1] : "";
      this.kuaishouApiSt = apiStMatch ? apiStMatch[1] : "";
      this.appver = appverMatch ? appverMatch[1] : "13.7.20.10468";

      if (!this.egid || !this.did) {
        console.log(
          `Ë¥¶Âè∑[${this.nickname}]${
            this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
          } cookieÊ†ºÂºèÂèØËÉΩÊó† egid Êàñ didÔºå‰ΩÜÁªßÁª≠Â∞ùËØï...`
        );
      }
    } catch (error) {
      console.log(
        `Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } Ëß£ÊûêcookieÂ§±Ë¥•: ${error.message}`
      );
    }
  }

  getTaskStats() {
    return this.taskStats;
  }

  printTaskStats() {
    console.log(
      `\nË¥¶Âè∑[${this.nickname}]${
        this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
      } ‰ªªÂä°ÊâßË°åÁªüËÆ°:`
    );
    for (const [taskKey, stats] of Object.entries(this.taskStats)) {
      const taskName = this.taskConfigs[taskKey].name;
      console.log(
        `  ${taskName}: ÊàêÂäü${stats.success}Ê¨°, Â§±Ë¥•${stats.failed}Ê¨°, ÊÄªÂ•ñÂä±${stats.totalReward}ÈáëÂ∏Å`
      );
    }
  }

  async retryOperation(operation, description, maxRetries = 3, delay = 2000) {
    let attempts = 0;
    let lastError = null;

    while (attempts < maxRetries) {
      try {
        const result = await operation();
        if (result) {
          return result;
        }
        lastError = new Error(description + " ËøîÂõûÁ©∫ÁªìÊûú");
      } catch (error) {
        lastError = error;
        console.log(
          `Ë¥¶Âè∑[${this.nickname}]${
            this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
          } ${description} ÂºÇÂ∏∏: ${error.message}`
        );
      }

      attempts++;
      if (attempts < maxRetries) {
        console.log(
          `Ë¥¶Âè∑[${this.nickname}]${
            this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
          } ${description} Â§±Ë¥•ÔºåÈáçËØï ${attempts}/${maxRetries}`
        );
        await new Promise((resolve) => setTimeout(resolve, delay));
      }
    }

    if (isDevMode && lastError) {
      //console.log("[Ë∞ÉËØï] " + description + " ÊúÄÁªàÂ§±Ë¥•: " + lastError.message);
    }

    return null;
  }

  async getAdInfo(taskConfig) {
    try {
      const adPath = "/rest/e/reward/mixed/ad";
      const formData = {
        encData: "|encData|",
        sign: "|sign|",
        cs: "false",
        client_key: "2ac2a76d",
        videoModelCrowdTag: "1_23",
        os: "android",
        "kuaishou.api_st": this.kuaishouApiSt,
        uQaTag: "1##swLdgl:99#ecPp:-9#cmNt:-0#cmHs:-3#cmMnsl:-0",
      };

      const queryData = {
        earphoneMode: "1",
        mod: "Xiaomi(23116PN5BC)",
        appver: this.appver,
        isp: "CUCC",
        language: "zh-cn",
        ud: this.userId,
        did_tag: "0",
        net: "WIFI",
        kcv: "1599",
        app: "0",
        kpf: "ANDROID_PHONE",
        ver: "11.6",
        android_os: "0",
        boardPlatform: "pineapple",
        kpn: "NEBULA",
        androidApiLevel: "35",
        country_code: "cn",
        sys: "ANDROID_15",
        sw: "1080",
        sh: "2400",
        abi: "arm64",
        userRecoBit: "0",
      };
      const requestBody = {
        appInfo: {
          appId: "kuaishou_nebula",
          name: "Âø´ÊâãÊûÅÈÄüÁâà",
          packageName: "com.kuaishou.nebula",
          version: this.appver,
          versionCode: -1,
        },
        deviceInfo: {
          osType: 1,
          osVersion: "15",
          deviceId: this.did,
          screenSize: {
            width: 1080,
            height: 2249,
          },
          ftt: "",
        },
        userInfo: {
          userId: this.userId,
          age: 0,
          gender: "",
        },
        impInfo: [
          {
            pageId: 11101,
            subPageId: taskConfig.subPageId,
            action: 0,
            browseType: 3,
            impExtData: "{}",
            mediaExtData: "{}",
          },
        ],
      };

      const encodedBody = Buffer.from(JSON.stringify(requestBody)).toString(
        "base64"
      );

      let encsign = await this.getSign(encodedBody);

      formData.encData = encsign.encdata;
      formData.sign = encsign.sign;

      let nesig = await this.requestSignService({
        urlpath: adPath,
        reqdata: qs.stringify(formData) + "&" + qs.stringify(queryData),
        api_client_salt: this.salt,
      });

      const finalQueryData = {
        ...queryData,
        sig: nesig.sig,
        __NS_sig3: nesig.__NS_sig3,
        __NS_xfalcon: "",
        __NStokensig: nesig.__NStokensig,
      };
      const url =
        "https://api.e.kuaishou.com" +
        adPath +
        "?" +
        querystring.stringify(finalQueryData);

      const { response, body: result } = await sendRequest(
        {
          method: "POST",
          url: url,
          headers: {
            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            Host: "api.e.kuaishou.com",
            "User-Agent": "kwai-android aegon/3.56.0",
            Cookie: "kuaishou_api_st=" + this.kuaishouApiSt,
          },
          form: formData,
          timeout: 12000,
        },
        this.proxyUrl,
        `Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } Ëé∑ÂèñÂπøÂëä`
      );

      if (!result) {
        return null;
      }

      if (
        result.errorMsg === "OK" &&
        result.feeds &&
        result.feeds[0] &&
        result.feeds[0].ad
      ) {
        const caption =
          result.feeds[0].caption || result.feeds[0].ad?.caption || "";
        if (caption) {
          console.log(
            `‚úÖ Ë¥¶Âè∑[${this.nickname}]${
              this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
            } ÊàêÂäüËé∑ÂèñÂà∞ÂπøÂëä‰ø°ÊÅØÔºö${caption}`
          );
        }

        const expTag = result.feeds[0].exp_tag || "";
        const llsid = expTag.split("/")[1]?.split("_")?.[0] || "";

        return {
          cid: result.feeds[0].ad.creativeId,
          llsid: llsid,
        };
      }

      if (isDevMode) {
        //console.log("[Ë∞ÉËØï] getAdInfo ÂéüÂßãÂìçÂ∫î:", JSON.stringify(result));
      }

      return null;
    } catch (error) {
      console.log(error);

      console.log(
        `‚ùå Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } Ëé∑ÂèñÂπøÂëäÂºÇÂ∏∏: ${error.message}`
      );
      return null;
    }
  }

  async generateSignature(creativeId, llsid, taskKey, taskConfig) {
    try {
      const bizData = JSON.stringify({
        businessId: taskConfig.businessId,
        endTime: this.endTime,
        extParams: "",
        mediaScene: "video",
        neoInfos: [
          {
            creativeId: creativeId,
            extInfo: "",
            llsid: llsid,
            requestSceneType: taskConfig.requestSceneType,
            taskType: taskConfig.taskType,
            watchExpId: "",
            watchStage: 0,
          },
        ],
        pageId: 11101,
        posId: taskConfig.posId,
        reportType: 0,
        sessionId: "",
        startTime: this.startTime,
        subPageId: taskConfig.subPageId,
      });
      const postData =
        "bizStr=" +
        encodeURIComponent(bizData) +
        "&cs=false&client_key=2ac2a76d&kuaishou.api_st=" +
        this.kuaishouApiSt;
      const urlData = this.queryParams + "&" + postData;

      const signResult = await this.requestSignService(
        {
          urlpath: this.taskReportPath,
          reqdata: urlData,
          api_client_salt: this.salt,
        },
        `Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } ÁîüÊàêÊä•ÂëäÁ≠æÂêç`
      );

      return {
        sig: signResult.sig,
        sig3: signResult.__NS_sig3,
        sigtoken: signResult.__NStokensig,
        post: postData,
      };
    } catch (error) {
      console.log(error);

      console.log(
        `‚ùå Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } ÁîüÊàêÁ≠æÂêçÂºÇÂ∏∏: ${error.message}`
      );
      return null;
    }
  }

  /* async generateSignature2(urlPath, urlData, salt, requestString) {
    const signResult = await this.requestSignService(
      {
        urlpath: urlPath,
        urldata: urlData,
        api_client_salt: salt,
        req_str: requestString,
      },
      `Ë¥¶Âè∑[${this.nickname}]${
        this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
      } ÁîüÊàêÂπøÂëäÁ≠æÂêç`
    );

    if (!signResult) {
      return null;
    }

    return signResult.data || signResult;
  }*/

  async submitReport(sig, sig3, sigtoken, postData, taskKey, taskConfig) {
    try {
      const url =
        "https://api.e.kuaishou.com" +
        this.taskReportPath +
        "?" +
        (this.queryParams +
          "&sig=" +
          sig +
          "&__NS_sig3=" +
          sig3 +
          "&__NS_xfalcon=&__NStokensig=" +
          sigtoken);

      const { response, body: result } = await sendRequest(
        {
          method: "POST",
          url: url,
          headers: {
            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            Host: "api.e.kuaishou.cn",
            "User-Agent": "kwai-android aegon/3.56.0",
            "Content-Type": "application/x-www-form-urlencoded",
          },
          body: postData,
          timeout: 12000,
        },
        this.proxyUrl,
        `Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } Êèê‰∫§‰ªªÂä°`
      );

      if (!result) {
        return {
          success: false,
          reward: 0,
        };
      }

      if (result.result === 1) {
        const reward = result.data?.neoAmount || 0;
        console.log(
          `üí∞ Ë¥¶Âè∑[${this.nickname}]${
            this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
          } ${taskConfig.name}Ëé∑Âæó${reward}ÈáëÂ∏ÅÂ•ñÂä±ÔºÅ`
        );

        if (reward <= this.lowRewardThreshold) {
          this.lowRewardStreak++;
          this.did = generateKuaishouDid();
          console.log(
            `‚ö†Ô∏è Ë¥¶Âè∑[${this.nickname}]${
              this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
            } ÈáëÂ∏ÅÂ•ñÂä±(${reward})‰Ωé‰∫éÈòàÂÄº(${
              this.lowRewardThreshold
            })ÔºåÊ®°Êãü‰∏ãËΩΩÂ∫îÁî®ÊèêÂçáÊùÉÈáçÔºåÂΩìÂâçËøûÁª≠‰ΩéÂ•ñÂä±Ê¨°Êï∞Ôºö${
              this.lowRewardStreak
            }/${this.lowRewardLimit}`
          );
          if (this.lowRewardStreak >= this.lowRewardLimit) {
            console.log(
              `üèÅ Ë¥¶Âè∑[${this.nickname}]${
                this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
              } ËøûÁª≠${this.lowRewardLimit}Ê¨°Â•ñÂä±‚â§${
                this.lowRewardThreshold
              }ÔºåÂÅúÊ≠¢ÂÖ®ÈÉ®‰ªªÂä°`
            );
            this.stopAllTasks = true;
          }
        } else {
          this.lowRewardStreak = 0;
        }

        return {
          success: true,
          reward: reward,
        };
      }

      if ([20107, 20108, 1003, 415].includes(result.result)) {
        console.log(
          `‚ö†Ô∏è Ë¥¶Âè∑[${this.nickname}]${
            this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
          } ${taskConfig.name} Â∑≤Ëææ‰∏äÈôê`
        );
        this.taskLimitReached[taskKey] = true;
        return {
          success: false,
          reward: 0,
        };
      }

      console.log(
        `‚ùå Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } ${taskConfig.name} Â•ñÂä±Â§±Ë¥•Ôºåresult=${result.result} msg=${
          result.data || ""
        }`
      );

      if (isDevMode) {
        //console.log("[Ë∞ÉËØï] submitReport ÂéüÂßãÂìçÂ∫î:", JSON.stringify(result));
      }

      return {
        success: false,
        reward: 0,
      };
    } catch (error) {
      console.log(
        `‚ùå Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } Êèê‰∫§‰ªªÂä°ÂºÇÂ∏∏: ${error.message}`
      );
      return {
        success: false,
        reward: 0,
      };
    }
  }
  async getSign(requestData) {
    try {
      const { response, body: result } = await sendRequest({
        method: "POST",
        url: "https://ks.smallfawn.top/encsign",
        body: JSON.stringify({
          data: requestData,
        }),
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (result.status) {
        return result.data;
      }
    } catch (error) {}
  }
  async requestSignService(requestData, description) {
    /*const cardKey = (process.env.ptkm || "").trim();
    if (!cardKey) {
      console.log(
        `‚ùå Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } Á≠æÂêçÂ§±Ë¥•: Êú™Êèê‰æõÂç°ÂØÜ`
      );
      return null;
    }*/
    let returnData = {};

    let newreqdata = {
      path: requestData.urlpath,
      data: requestData.reqdata,
      salt: requestData.api_client_salt,
    };

    const { response, body: result } = await sendRequest(
      {
        method: "POST",
        url: "https://ks.smallfawn.top/nssig",
        headers: {
          "Content-Type": "application/json",
          "User-Agent": "Mozilla/5.0",
          //"X-Card-Key": cardKey,
        },
        body: JSON.stringify(newreqdata),
        timeout: 15000,
      },
      null,
      description + "ÔºàÁ≠æÂêçÊúçÂä°Ôºâ"
    );

    /*if (!result) {
      if (response && [403, 405, 502].includes(response.statusCode)) {
        if (response.statusCode === 403) {
          console.log(
            `‚ùå Ë¥¶Âè∑[${this.nickname}]${
              this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
            } Á≠æÂêçÂ§±Ë¥•: HTTPÁä∂ÊÄÅÁ†Å 403 - Âç°ÂØÜËøáÊúüÔºåËØ∑Ê£ÄÊü•ÊàñÊõ¥Êç¢Âç°ÂØÜ`
          );
        } else {
          console.log(
            `‚ùå Ë¥¶Âè∑[${this.nickname}]${
              this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
            } Á≠æÂêçÂ§±Ë¥•: HTTPÁä∂ÊÄÅÁ†Å ${response.statusCode}ÔºåËá™Âä®ÂÅúÊ≠¢ËÑöÊú¨ËøêË°å`
          );
        }
        process.exit(1);
      }
      console.log(
        `‚ùå Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } Á≠æÂêçÂ§±Ë¥•: Êó†ÂìçÂ∫î`
      );
      return null;
    }

    if (result.success && result.status === "queued" && result.queue_id) {
      const queueResult = await this.pollQueueStatus(result.queue_id);
      if (
        queueResult &&
        queueResult.success &&
        (queueResult.status === "completed" ||
          queueResult.status === "processed")
      ) {
        return queueResult;
      }
      console.log(
        `Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } Á≠æÂêçÂ§±Ë¥•: ${queueResult?.error || queueResult?.status || "Êú™Áü•"}`
      );
      return null;
    }

    if (
      result.success &&
      (!result.status ||
        result.status === "processed" ||
        result.status === "completed")
    ) {
      return result;
    }

    console.log(
      `Ë¥¶Âè∑[${this.nickname}]${
        this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
      } Á≠æÂêçÂ§±Ë¥•: ${result.error || result.message || result.status || "Êú™Áü•"}`
    );
    return null;*/
    if (result) {
      let __NS_sig3 = result.data.nssig3;
      let __NStokensig = result.data.nstokensig;
      Object.assign(returnData, {
        __NS_sig3,
        __NStokensig,
        sig: result.data.sig,
      });

      return returnData;
    }
  }

  /*async pollQueueStatus(queueId, maxTime = 30000, interval = 2000) {
    const startTime = Date.now();

    while (Date.now() - startTime < maxTime) {
      const { response, body: result } = await sendRequest(
        {
          method: "GET",
          url: queueStatusApiUrl + "?queue_id=" + encodeURIComponent(queueId),
          headers: {
            "User-Agent": "Mozilla/5.0",
          },
          timeout: 10000,
        },
        null,
        `Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } Á≠æÂêçÊéíÈòü`
      );

      if (result?.success) {
        if (result.status === "completed" || result.status === "processed") {
          return result;
        }
        if (result.status === "failed") {
          return result;
        }
      }

      await new Promise((resolve) => setTimeout(resolve, interval));
    }

    return {
      success: false,
      status: "failed",
      error: "queue_timeout",
    };
  }*/

  async executeTask(taskKey) {
    const taskConfig = this.taskConfigs[taskKey];
    if (!taskConfig) {
      console.log(
        `‚ùå Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } Êú™Áü•‰ªªÂä°: ${taskKey}`
      );
      return false;
    }

    if (this.taskLimitReached[taskKey]) {
      return false;
    }

    try {
      const adInfo = await this.retryOperation(
        () => this.getAdInfo(taskConfig),
        `Ëé∑Âèñ${taskConfig.name}‰ø°ÊÅØ`,
        3
      );
      if (!adInfo) {
        this.taskStats[taskKey].failed++;
        return false;
      }

      const watchTime = Math.floor(Math.random() * 10000) + 30000;
      console.log(
        `üîç Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } ==>${
          taskConfig.name
        } ${generateRandomInteractionMessage()} ${Math.round(
          watchTime / 1000
        )} Áßí`
      );
      await new Promise((resolve) => setTimeout(resolve, watchTime));

      const signature = await this.retryOperation(
        () =>
          this.generateSignature(adInfo.cid, adInfo.llsid, taskKey, taskConfig),
        `ÁîüÊàê${taskConfig.name}Á≠æÂêç`,
        3
      );
      if (!signature) {
        this.taskStats[taskKey].failed++;
        return false;
      }

      const submitResult = await this.retryOperation(
        () =>
          this.submitReport(
            signature.sig,
            signature.sig3,
            signature.sigtoken,
            signature.post,
            taskKey,
            taskConfig
          ),
        `Êèê‰∫§${taskConfig.name}Êä•Âëä`,
        3
      );

      if (submitResult?.success) {
        this.taskStats[taskKey].success++;
        this.taskStats[taskKey].totalReward += submitResult.reward || 0;
        return true;
      }

      this.taskStats[taskKey].failed++;
      return false;
    } catch (error) {
      console.log(
        `‚ùå Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } ‰ªªÂä°ÂºÇÂ∏∏(${taskKey}): ${error.message}`
      );
      this.taskStats[taskKey].failed++;
      return false;
    }
  }

  async executeAllTasksByPriority() {
    const results = {};

    for (const taskKey of this.tasksToExecute) {
      if (this.stopAllTasks) {
        break;
      }

      if (!this.taskConfigs[taskKey]) {
        console.log(
          `‚ö†Ô∏è Ë¥¶Âè∑[${this.nickname}]${
            this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
          } Ë∑≥ËøáÊú™Áü•‰ªªÂä°: ${taskKey}`
        );
        continue;
      }

      console.log(
        `üöÄ Ë¥¶Âè∑[${this.nickname}]${
          this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
        } ÂºÄÂßã‰ªªÂä°Ôºö${this.taskConfigs[taskKey].name}`
      );
      results[taskKey] = await this.executeTask(taskKey);

      if (this.stopAllTasks) {
        break;
      }

      if (taskKey !== this.tasksToExecute[this.tasksToExecute.length - 1]) {
        const waitTime = Math.floor(Math.random() * 8000) + 7000;
        console.log(
          `‚è± Ë¥¶Âè∑[${this.nickname}]${
            this.remark ? "Ôºà" + this.remark + "Ôºâ" : ""
          } ‰∏ã‰∏Ä‰∏™‰ªªÂä°ÔºåÈöèÊú∫Á≠âÂæÖ ${Math.round(waitTime / 1000)} Áßí`
        );
        await new Promise((resolve) => setTimeout(resolve, waitTime));
      }
    }

    return results;
  }
}

function parseAccountConfig(configString) {
  const parts = String(configString || "")
    .trim()
    .split("#");
  if (parts.length < 2) {
    return null;
  }

  let remark = "";
  let cookie = "";
  let salt = "";
  let proxyUrl = null;

  if (parts.length === 2) {
    // Format: ck#salt
    cookie = parts[0];
    salt = parts[1];
  } else if (parts.length === 3) {
    // Format: remark#ck#salt or ck#salt#proxy
    if (/socks5:\/\//i.test(parts[2])) {
      cookie = parts[0];
      salt = parts[1];
      proxyUrl = parts[2];
    } else {
      remark = parts[0];
      cookie = parts[1];
      salt = parts[2];
    }
  } else if (parts.length >= 4) {
    // Format: remark#ck#salt#proxy
    remark = parts[0];
    cookie = parts[1];
    salt = parts.slice(2, parts.length - 1).join("#");
    proxyUrl = parts[parts.length - 1];
  }

  //cookie = cookie.replace("kpn=NEBULA", "kpn=KUAISHOU");

  if (proxyUrl) {
    if (proxyUrl.includes("|")) {
      console.log(`ÂºÄÂßãËß£Êûê‰ª£ÁêÜÊ†ºÂºè: ${proxyUrl}`);
      const proxyParts = proxyUrl.split("|");
      if (proxyParts.length >= 2) {
        const [ip, port, username, password] = proxyParts;
        proxyUrl = `socks5://${username}:${password}@${ip}:${port}`;
      } else {
        proxyUrl = null;
        console.log(`‚ö†Ô∏è ‰ª£ÁêÜÂ≠óÊÆµÊ†ºÂºèÈîôËØØÔºåÂøΩÁï•Ôºö${proxyUrl}`);
      }
    } else if (!/^socks5:\/\//i.test(proxyUrl)) {
      console.log(`‚ö†Ô∏è ‰ª£ÁêÜÂ≠óÊÆµ‰∏çÊòØ socks5:// URLÔºåÂøΩÁï•Ôºö${proxyUrl}`);
      proxyUrl = null;
    }
  }

  return {
    remark: remark || "",
    salt: salt,
    cookie: cookie,
    proxyUrl: proxyUrl,
  };
}

function loadAccountsFromEnv() {
  const accountConfigs = getAccountConfigsFromEnv();
  const accounts = [];

  for (const configString of accountConfigs) {
    const accountConfig = parseAccountConfig(configString);
    if (accountConfig) {
      accounts.push(accountConfig);
    } else {
      console.log(`Ë¥¶Âè∑Ê†ºÂºèÈîôËØØÔºö${configString}`);
    }
  }

  accounts.forEach((account, index) => {
    account.index = index + 1;
  });

  return accounts;
}

async function concurrentExecute(items, concurrency, processor) {
  const results = new Array(items.length);
  let currentIndex = 0;

  async function worker() {
    while (true) {
      const index = currentIndex++;
      if (index >= items.length) {
        return;
      }

      const item = items[index];
      try {
        results[index] = await processor(item, index);
      } catch (error) {
        console.log(`Âπ∂ÂèëÊâßË°åÂºÇÂ∏∏Ôºàindex=${index + 1}ÔºâÔºö${error.message}`);
        results[index] = null;
      }
    }
  }

  const workers = Array.from(
    { length: Math.min(concurrency, items.length) },
    worker
  );
  await Promise.all(workers);

  return results;
}

async function processAccount(accountConfig) {
  if (accountConfig.proxyUrl) {
    console.log(
      `Ë¥¶Âè∑[${accountConfig.index}]${
        accountConfig.remark ? "Ôºà" + accountConfig.remark + "Ôºâ" : ""
      } üîå ÊµãËØï‰ª£ÁêÜËøûÊé•‰∏≠...`
    );
    const proxyTest = await testProxyConnectivity(
      accountConfig.proxyUrl,
      `Ë¥¶Âè∑[${accountConfig.index}]${
        accountConfig.remark ? "Ôºà" + accountConfig.remark + "Ôºâ" : ""
      }`
    );
    console.log(
      `  - ${
        proxyTest.ok
          ? "‚úÖ ‰ª£ÁêÜÈ™åËØÅÈÄöËøáÔºåIP: " + proxyTest.ip
          : "‚ùå ‰ª£ÁêÜÈ™åËØÅÂ§±Ë¥•"
      }: ${proxyTest.msg}`
    );

    if (proxyTest.ok && proxyTest.ip && proxyTest.ip !== "localhost") {
      if (usedProxies.has(proxyTest.ip)) {
        console.log(`\n‚ö†Ô∏è Â≠òÂú®Áõ∏Âêå‰ª£ÁêÜIPÔºà${proxyTest.ip}ÔºâÔºåËØ∑Á´ãÂç≥Ê£ÄÊü•ÔºÅ`);
        process.exit(1);
      }
      usedProxies.add(proxyTest.ip);
    }
  } else {
    console.log(
      `Ë¥¶Âè∑[${accountConfig.index}]${
        accountConfig.remark ? "Ôºà" + accountConfig.remark + "Ôºâ" : ""
      } Êú™ÈÖçÁΩÆ‰ª£ÁêÜÔºåËµ∞Áõ¥Ëøû`
    );
  }

  console.log(
    `Ë¥¶Âè∑[${accountConfig.index}]${
      accountConfig.remark ? "Ôºà" + accountConfig.remark + "Ôºâ" : ""
    } üîç Ëé∑ÂèñË¥¶Âè∑‰ø°ÊÅØ‰∏≠...`
  );
  let initialAccountInfo = await getAccountBasicInfo(
    accountConfig.cookie,
    accountConfig.proxyUrl,
    accountConfig.index
  );
  let nickname = initialAccountInfo?.nickname || "Ë¥¶Âè∑" + accountConfig.index;

  if (initialAccountInfo) {
    const totalCoin =
      initialAccountInfo.totalCoin != null
        ? initialAccountInfo.totalCoin
        : "Êú™Áü•";
    const allCash =
      initialAccountInfo.allCash != null ? initialAccountInfo.allCash : "Êú™Áü•";
    console.log(
      `Ë¥¶Âè∑[${nickname}] ‚úÖ ÁôªÂΩïÊàêÂäüÔºåüí∞ ÂΩìÂâçÈáëÂ∏Å: ${totalCoin}Ôºåüí∏ ÂΩìÂâç‰ΩôÈ¢ù: ${allCash}`
    );
  } else {
    console.log(`Ë¥¶Âè∑[${nickname}] ‚ùå Âü∫Êú¨‰ø°ÊÅØËé∑ÂèñÂ§±Ë¥•ÔºåÁªßÁª≠ÊâßË°å`);
  }

  const adTask = new KuaishouAdTask({
    ...accountConfig,
    nickname: nickname,
    tasksToExecute: tasksToExecute,
  });

  await adTask.checkCoinLimit();
  if (adTask.coinExceeded) {
    console.log(
      `Ë¥¶Âè∑[${adTask.nickname}]${
        accountConfig.remark ? "Ôºà" + accountConfig.remark + "Ôºâ" : ""
      } ÂàùÂßãÈáëÂ∏ÅÂ∑≤Ë∂ÖËøáÈòàÂÄºÔºå‰∏çÊâßË°å‰ªªÂä°`
    );

    const finalAccountInfo = await getAccountBasicInfo(
      accountConfig.cookie,
      accountConfig.proxyUrl,
      accountConfig.index
    );
    const initialCoin = initialAccountInfo?.totalCoin || 0;
    const finalCoin = finalAccountInfo?.totalCoin || 0;
    const coinChange = finalCoin - initialCoin;
    const initialCash = initialAccountInfo?.allCash || 0;
    const finalCash = finalAccountInfo?.allCash || 0;
    const cashChange = finalCash - initialCash;

    return {
      index: accountConfig.index,
      remark: accountConfig.remark || "Êó†Â§áÊ≥®",
      nickname: nickname,
      initialCoin: initialCoin,
      finalCoin: finalCoin,
      coinChange: coinChange,
      initialCash: initialCash,
      finalCash: finalCash,
      cashChange: cashChange,
      stats: adTask.getTaskStats(),
      coinLimitExceeded: true,
    };
  }

  for (let round = 0; round < KSROUNDS; round++) {
    const waitTime = Math.floor(Math.random() * 8000) + 8000;
    console.log(
      `Ë¥¶Âè∑[${adTask.nickname}]${
        accountConfig.remark ? "Ôºà" + accountConfig.remark + "Ôºâ" : ""
      } ‚åõ Á¨¨${round + 1}ËΩÆÔºåÂÖàÈöèÊú∫Á≠âÂæÖ ${Math.round(waitTime / 1000)} Áßí`
    );
    //await new Promise((resolve) => setTimeout(resolve, waitTime));

    console.log(
      `Ë¥¶Âè∑[${adTask.nickname}]${
        accountConfig.remark ? "Ôºà" + accountConfig.remark + "Ôºâ" : ""
      } üöÄ ÂºÄÂßãÁ¨¨${round + 1}ËΩÆ‰ªªÂä°`
    );
    const roundResults = await adTask.executeAllTasksByPriority();

    if (Object.values(roundResults).some(Boolean)) {
      console.log(
        `Ë¥¶Âè∑[${adTask.nickname}]${
          accountConfig.remark ? "Ôºà" + accountConfig.remark + "Ôºâ" : ""
        } ‚úÖ Á¨¨${round + 1}ËΩÆÊâßË°åÂÆåÊàê`
      );
    } else {
      console.log(
        `Ë¥¶Âè∑[${adTask.nickname}]${
          accountConfig.remark ? "Ôºà" + accountConfig.remark + "Ôºâ" : ""
        } ‚ö†Ô∏è Á¨¨${round + 1}ËΩÆÊ≤°ÊúâÊàêÂäü‰ªªÂä°`
      );
    }

    if (adTask.stopAllTasks) {
      console.log(
        `Ë¥¶Âè∑[${adTask.nickname}]${
          accountConfig.remark ? "Ôºà" + accountConfig.remark + "Ôºâ" : ""
        } üèÅ ËææÂà∞ÂÅúÊ≠¢Êù°‰ª∂ÔºåÁªàÊ≠¢ÂêéÁª≠ËΩÆÊ¨°`
      );
      break;
    }

    if (round < KSROUNDS - 1) {
      const nextWaitTime = Math.floor(Math.random() * 10000) + 10000;
      console.log(
        `Ë¥¶Âè∑[${adTask.nickname}]${
          accountConfig.remark ? "Ôºà" + accountConfig.remark + "Ôºâ" : ""
        } ‚åõ Á≠âÂæÖ ${Math.round(nextWaitTime / 1000)} ÁßíËøõÂÖ•‰∏ã‰∏ÄËΩÆ`
      );
      await new Promise((resolve) => setTimeout(resolve, nextWaitTime));
    }
  }

  const finalAccountInfo = await getAccountBasicInfo(
    accountConfig.cookie,
    accountConfig.proxyUrl,
    accountConfig.index
  );
  const initialCoin = initialAccountInfo?.totalCoin || 0;
  const finalCoin = finalAccountInfo?.totalCoin || 0;
  const coinChange = finalCoin - initialCoin;
  const initialCash = initialAccountInfo?.allCash || 0;
  const finalCash = finalAccountInfo?.allCash || 0;
  const cashChange = finalCash - initialCash;

  adTask.printTaskStats();

  return {
    index: accountConfig.index,
    remark: accountConfig.remark || "Êó†Â§áÊ≥®",
    nickname: nickname,
    initialCoin: initialCoin,
    finalCoin: finalCoin,
    coinChange: coinChange,
    initialCash: initialCash,
    finalCash: finalCash,
    cashChange: cashChange,
    stats: adTask.getTaskStats(),
    coinLimitExceeded: adTask.coinExceeded,
  };
}

function printAccountsSummary(accountResults) {
  if (!accountResults.length) {
    console.log("\nÊ≤°ÊúâÂèØÊòæÁ§∫ÁöÑË¥¶Âè∑‰ø°ÊÅØ„ÄÇ");
    return;
  }

  const totalInitialCoin = accountResults.reduce((sum, account) => {
    return sum + (parseInt(account.initialCoin) || 0);
  }, 0);

  const totalFinalCoin = accountResults.reduce((sum, account) => {
    return sum + (parseInt(account.finalCoin) || 0);
  }, 0);

  const totalCoinChange = totalFinalCoin - totalInitialCoin;

  const totalInitialCash = accountResults.reduce((sum, account) => {
    return sum + (parseFloat(account.initialCash) || 0);
  }, 0);

  const totalFinalCash = accountResults.reduce((sum, account) => {
    return sum + (parseFloat(account.finalCash) || 0);
  }, 0);

  const totalCashChange = totalFinalCash - totalInitialCash;

  let totalTasks = 0;
  let totalSuccessTasks = 0;
  let totalReward = 0;

  accountResults.forEach((account) => {
    if (account.stats) {
      Object.values(account.stats).forEach((stat) => {
        totalTasks += stat.success + stat.failed;
        totalSuccessTasks += stat.success;
        totalReward += stat.totalReward;
      });
    }
  });

  const successRate =
    totalTasks > 0
      ? ((totalSuccessTasks / totalTasks) * 100).toFixed(1)
      : "0.0";
  const coinLimitExceededCount = accountResults.filter(
    (account) => account.coinLimitExceeded
  ).length;

  console.log("\n\n" + "=".repeat(80));
  console.log(
    "|" + centerAlign("      Âø´ÊâãÂÖªÂè∑‰ªªÂä°ÊâßË°åÁªìÊûúÊ±áÊÄªË°®      ", 78) + "|"
  );
  console.log("=".repeat(80));
  console.log(
    "|" +
      ("ÊÄªË¥¶Âè∑Êï∞: " + accountResults.length).padEnd(22) +
      ("Ë∂ÖËøáÈáëÂ∏ÅÈòàÂÄºË¥¶Âè∑: " + coinLimitExceededCount).padEnd(22) +
      ("ÊÄª‰ªªÂä°Êï∞: " + totalTasks).padEnd(22) +
      ("‰ªªÂä°ÊàêÂäüÁéá: " + successRate + "%").padEnd(10) +
      "|"
  );
  console.log(
    "|" +
      ("ÊÄªÈáëÂ∏ÅÂèòÂåñ: " + totalCoinChange).padEnd(26) +
      ("ÊÄªÈáëÂ∏ÅÂ•ñÂä±: " + totalReward).padEnd(26) +
      ("ÊÄª‰ΩôÈ¢ùÂèòÂåñ: " + totalCashChange.toFixed(2)).padEnd(24) +
      "|"
  );
  console.log("-".repeat(80));

  const headers = [
    "Â∫èÂè∑",
    "Â§áÊ≥®",
    "Ë¥¶Âè∑ÊòµÁß∞",
    "ÂàùÂßãÈáëÂ∏Å",
    "ÊúÄÁªàÈáëÂ∏Å",
    "ÈáëÂ∏ÅÂèòÂåñ",
    "ÂàùÂßã‰ΩôÈ¢ù",
    "ÊúÄÁªà‰ΩôÈ¢ù",
    "‰ΩôÈ¢ùÂèòÂåñ",
  ];
  const widths = [6, 16, 16, 12, 12, 12, 12, 12, 12];

  let headerRow = "|";
  headers.forEach((header, index) => {
    headerRow += centerAlign(header, widths[index]) + "|";
  });
  console.log(headerRow);

  let separatorRow = "|";
  widths.forEach((width) => {
    separatorRow += "-".repeat(width) + "|";
  });
  console.log(separatorRow);

  accountResults.forEach((account) => {
    let dataRow = "|";
    dataRow += centerAlign(account.index, widths[0]) + "|";
    dataRow += centerAlign(account.remark, widths[1]) + "|";

    const nicknameWithWarning =
      (account.nickname || "-") + (account.coinLimitExceeded ? " ‚ö†Ô∏è" : "");
    dataRow +=
      centerAlign(nicknameWithWarning.substring(0, widths[2] - 2), widths[2]) +
      "|";
    dataRow += centerAlign(account.initialCoin, widths[3]) + "|";
    dataRow += centerAlign(account.finalCoin, widths[4]) + "|";

    const coinChangeStr =
      account.coinChange >= 0 ? "+" + account.coinChange : account.coinChange;
    dataRow += centerAlign(coinChangeStr, widths[5]) + "|";
    dataRow += centerAlign(account.initialCash, widths[6]) + "|";
    dataRow += centerAlign(account.finalCash, widths[7]) + "|";

    const cashChangeStr =
      account.cashChange >= 0
        ? "+" + account.cashChange.toFixed(2)
        : account.cashChange.toFixed(2);
    dataRow += centerAlign(cashChangeStr, widths[8]) + "|";

    console.log(dataRow);
  });

  console.log("=".repeat(80));
  console.log(
    "|" + centerAlign("      ‰ªªÂä°ÊâßË°åÂÆåÊàêÔºåËØ∑Êü•ÁúãËØ¶ÁªÜÁªìÊûú      ", 78) + "|"
  );
  console.log("=".repeat(80));
}

(async () => {
  const accounts = loadAccountsFromEnv();
  console.log(`ÂÖ±ÊâæÂà∞ ${accounts.length} ‰∏™ÊúâÊïàË¥¶Âè∑`);

  if (!accounts.length) {
    process.exit(1);
  }

  const maxConcurrency = getEnvNumber("MAX_CONCURRENCY", 888);

  console.log(`\nÈò≤ÈªëÂπ∂ÂèëÔºö${maxConcurrency}    Èò≤ÈªëËΩÆÊï∞Ôºö${KSROUNDS}\n`);

  const results = [];

  await concurrentExecute(accounts, maxConcurrency, async (account) => {
    console.log(
      `\n‚Äî‚Äî üöÄ ÂºÄÂßãË¥¶Âè∑[${account.index}]${
        account.remark ? "Ôºà" + account.remark + "Ôºâ" : ""
      } ‚Äî‚Äî`
    );

    try {
      const result = await processAccount(account);
      results.push({
        index: account.index,
        remark: account.remark || "Êó†Â§áÊ≥®",
        nickname: result?.nickname || `Ë¥¶Âè∑${account.index}`,
        initialCoin: result?.initialCoin || 0,
        finalCoin: result?.finalCoin || 0,
        coinChange: result?.coinChange || 0,
        initialCash: result?.initialCash || 0,
        finalCash: result?.finalCash || 0,
        cashChange: result?.cashChange || 0,
        stats: result?.stats || {},
        coinLimitExceeded: result?.coinLimitExceeded || false,
      });
    } catch (error) {
      console.log(
        `Ë¥¶Âè∑[${account.index}]${
          account.remark ? "Ôºà" + account.remark + "Ôºâ" : ""
        } ‚ùå ÊâßË°åÂºÇÂ∏∏Ôºö${error.message}`
      );
      results.push({
        index: account.index,
        remark: account.remark || "Êó†Â§áÊ≥®",
        nickname: `Ë¥¶Âè∑${account.index}`,
        initialCoin: 0,
        finalCoin: 0,
        coinChange: 0,
        initialCash: 0,
        finalCash: 0,
        cashChange: 0,
        error: error.message,
      });
    }
  });

  results.sort((a, b) => a.index - b.index);

  console.log("\nÂÖ®ÈÉ®ÂÆåÊàê„ÄÇ", "‚úÖ");
  console.log(
    "\n---------------------------------------------- Ë¥¶Âè∑‰ø°ÊÅØÊ±áÊÄª ----------------------------------------------"
  );

  printAccountsSummary(results);
})();

// ÂΩìÂâçËÑöÊú¨Êù•Ëá™‰∫éhttp://script.345yun.cnËÑöÊú¨Â∫ì‰∏ãËΩΩÔºÅ